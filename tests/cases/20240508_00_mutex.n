import coroutine as co
import coroutine.mutex as m

int result_no_lock = 0

// 闭包引用 no_lock
fn sum_no_lock() {
    for int i = 0; i < 1000; i+=1 {
        result_no_lock += 1
    }
}

for int i = 0; i < 1000; i+=1 {
    go sum_no_lock()
}

// 等待 1s 让协程完成
co.sleep(3000)
println("post result_no_lock: ", &result_no_lock, result_no_lock)
assert(result_no_lock < 1000000 && result_no_lock > 900000)

var mu = m.mutex_t{}
int result_lock = 0

fn sum_lock() {
    mu.lock()
    for int i = 0; i < 100; i+=1 {
        result_lock += 1
    }
    mu.unlock()
}

for int i = 0; i < 5000; i+=1 {
    go sum_lock()
}

for int i = 0; i <= 10; i+=1 {
    if result_lock == 500000 {
        break
    }
    println('wait result lock complete..., current =', result_lock)
    co.sleep(1000)
}

println("post result_lock: ", &result_lock, result_lock)

assert(result_lock == 500000)
=== test_read
--- main.n
import fs
import syscall

fn main():void! {
    var f = fs.open('./test.txt', syscall.O_RDONLY, 0)
    var content = f.read()
    print('read test.txt data:\n', content)
}

--- test.txt
hello world in test.txt
hello nature in test.txt
hello golang in test.txt
hello rust in test.txt
hello kotlin in test.txt

--- output.txt
read test.txt data:
hello world in test.txt
hello nature in test.txt
hello golang in test.txt
hello rust in test.txt
hello kotlin in test.txt

=== test_write_failed
--- main.n
import fs
import syscall

fn main():void! {
    var f = fs.open('./test.txt', syscall.O_RDONLY, 0)
    f.write('write data hahaha') catch err {
        throw 'write to test.txt failed:' + err.msg
    }
}

--- test.txt
hello world in test.txt
hello nature in test.txt

--- output.txt
coroutine 'main' uncaught error: 'write to test.txt failed:bad file descriptor' at nature-test/main.n:7:45

=== test_write_success
--- main.n
import fs
import syscall

fn main():void! {
    var f = fs.open('./test.txt',  syscall.O_RDWR|syscall.O_TRUNC, 0644)
    f.write('hello\nworld')

    // check
    assert(f.read() == 'hello\nworld')

    f.close()
    println('file closed')
}

--- test.txt
hello world in test.txt


=== test_close
--- main.n
import fs
import syscall

fn main():void! {
    var f = fs.open('./test.txt',  syscall.O_RDWR|syscall.O_TRUNC, 0644)
    f.close()
    f.write('hello\nworld')
}
--- test.txt
hello world

--- output.txt
coroutine 'main' uncaught error: 'fd already closed' at nature-test/main.n:7:23

=== test_read_at
--- main.n
import fs
import syscall

fn main():void! {
    var f = fs.open('./test.txt', syscall.O_RDONLY, 0)
    
    // 从偏移量 6 开始读取 5 个字节
    var content1 = f.read_at(6, 5)
    println('read_at(6, 5):', content1)
    
    // 从偏移量 0 开始读取 11 个字节
    var content2 = f.read_at(0, 11)
    println('read_at(0, 11):', content2)
    
    // 从偏移量 12 开始读取到文件结尾
    var content3 = f.read_at(12, -1)
    print('read_at(12, -1): ', content3)
    
    f.close()
}

--- test.txt
hello world in test.txt

--- output.txt
read_at(6, 5): world
read_at(0, 11): hello world
read_at(12, -1): in test.txt

=== test_write_at
--- main.n
import fs
import syscall

fn main():void! {
    // 创建文件并写入初始内容
    var f = fs.open('./test.txt', syscall.O_RDWR|syscall.O_CREAT|syscall.O_TRUNC, 0644)
    f.write('hello world in test.txt')
    
    // 在偏移量 6 处写入新内容
    f.write_at('nature', 6, 6)
    
    // 读取整个文件内容进行验证
    f.seek(0, syscall.SEEK_SET)
    var content = f.read()
    println('After write_at:', content)
    
    // 在偏移量 13 处写入新内容，指定长度为 2（只写入 'in' 而不是 'in test'）
    f.write_at('in test', 13, 2)
    
    // 再次读取整个文件内容进行验证
    f.seek(0, syscall.SEEK_SET)
    content = f.read()
    println('After second write_at:', content)
    
    f.close()
}

--- output.txt
After write_at: hello naturein test.txt
After second write_at: hello natureiintest.txt

import coroutine as co
import libc_temp

fn car() {
    var a = vec<int>{len=10}
    a = vec<int>{len=403}
    a = vec<int>{len=1201}
    a = vec<int>{len=512}
    a = vec<int>{len=700}

    var c = {1:2, 2:3, 3:4}

    a[0] = 1
    a[2] = 2
    a[4] = 4
    a[8] = 8
    a[16] = 16
    a[32] = 32
    a[128] = 128
    a[500] = 128

    println('will usleep 20ms')
    usleep(10 as u32 * 1000)

    var b = 'hello world nice'
    b = 'hello world nice'
    b = 'wwwwwwwwwwww'
    b = 'ccccccccccccc'
    b = 'bbbbbbbbbbbbbb'
    b = 'hello world nice'
    b = 'hello world nice'
}

fn foo(){
    int a = 1
    int b = 2
    bool c = true
    string d = 'hello world'
    d = 'done done'
    car()
    // runtime_force_gc()

    co.sleep(1000)
    print('share sub_co done\n')
}

var bar = fn(){
    var i = 2
    for i > 0 {
        co.sleep(1000)
        i -= 1
    }

    print('solo sub_co done\n')
}

// - 共享协程
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

co.run(foo, [], 0)
co.run(foo, [], 0)
co.run(foo, [], 0)

// - 独享协程
// co.run(foo, [], co.SOLO)

// main for sleep
for int i=0; i<25; i+=1 {
    co.sleep(100)
    if i > 20 {
        println('main_co sleep done', i)
    }
}

println('main_co done')
#ifndef NATURE_SRC_SYNTAX_TOKEN_H_
#define NATURE_SRC_SYNTAX_TOKEN_H_

#include <stdlib.h>
#include "src/value.h"

typedef enum {
  // SINGLE-CHARACTER TOKENS.
  TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN, // ()
  TOKEN_LEFT_SQUARE, TOKEN_RIGHT_SQUARE, // []
  TOKEN_LEFT_CURLY, TOKEN_RIGHT_CURLY, // {}
  TOKEN_LEFT_ANGLE, TOKEN_RIGHT_ANGLE, // <>


  TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,
  TOKEN_COLON, TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR, // * STAR
  TOKEN_EOF, TOKEN_STMT_EOF,

  // ONE OR TWO CHARACTER TOKENS.
  TOKEN_NOT, TOKEN_NOT_EQUAL,
  TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
  TOKEN_GREATER, TOKEN_GREATER_EQUAL,
  TOKEN_LESS, TOKEN_LESS_EQUAL,
  TOKEN_AND, TOKEN_AND_AND, TOKEN_OR, TOKEN_OR_OR,

  // LITERALS.
  TOKEN_LITERAL_IDENT, TOKEN_LITERAL_STRING, TOKEN_LITERAL_FLOAT, TOKEN_LITERAL_INT,

  // KEYWORDS.
  TOKEN_TRUE, TOKEN_FALSE,
  TOKEN_FOR, TOKEN_IN, TOKEN_WHILE, TOKEN_IF, TOKEN_ELSE, TOKEN_ELSE_IF,
  TOKEN_VAR, TOKEN_STRING, TOKEN_BOOL, TOKEN_FLOAT, TOKEN_INT,
  TOKEN_LIST, TOKEN_MAP, TOKEN_FUNCTION, TOKEN_VOID,
  TOKEN_IMPORT, TOKEN_AS, TOKEN_RETURN
} token_type;

typedef struct {
  uint8_t type; // 通配类型，如 var
  string literal;
} token;

token *token_new(uint8_t type, char *literal);

#endif //NATURE_SRC_SYNTAX_TOKEN_H_

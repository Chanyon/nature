import runtime

// 暂时无法通过 struct 推导
// type vec<T> = struct{
//    void_ptr data
//    int len
//    int cap
//    int reflect_hash
//    int ele_reflect_hash
// }

fn vec_new<T>(int len, int cap):vec<T> {
    int hash = @reflect_hash(vec<T>)
    int ele_hash = @reflect_hash(T)
    return runtime.vec_new(hash, ele_hash, len, cap) as vec<T>
}

fn vec<T>.push(T v) {
    raw_ptr<T> ref = &v
    return runtime.vec_push(self as void_ptr, ref as void_ptr)
}

fn vec<T>.slice(int start, int end):vec<T> {
    return runtime.vec_slice(self as void_ptr, start, end) as vec<T>
}

fn vec<T>.concat(vec<T> l2):vec<T> {
    return runtime.vec_concat(self as void_ptr, l2 as void_ptr) as vec<T>
}

fn vec<T>.len():int {
    return runtime.vec_length(self as void_ptr)
}

fn vec<T>.cap():int {
    return runtime.vec_capacity(self as void_ptr)
}

fn vec<T>.ref():void_ptr {
    return runtime.vec_ref(self as void_ptr)
}
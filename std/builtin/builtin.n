type t0 = gen any

// 这里都 string 是 nature string 类型
type errort = struct {
    string msg
    bool has
}

// 一个通用的 c 语言指针,可以理解为 c 中的 void*
type cptr = ptr<int>

fn print(...[any] args) {}

fn println(...[any] args) {}

fn set(...[t0] keys):{t0} {}

// 比如 [t0] 类型的 list 只能接收 t0 类型的 v
fn list_push([t0] list, ptr<t0> v) {}

fn list_length([t0] list):int {}

fn map_delete({t0:t0} map, ptr<t0> key) {}

fn map_length({t0:t0} map):int {}

fn set_contains({t0} set, ptr<t0> key):bool {}

fn set_add({t0} set, ptr<t0> key): bool {}

fn set_delete({t0} set, ptr<t0> key) {}

// 方便测试，后续封装到系统调用库中
fn sleep(int second) {}

fn runtime_gc() {}

fn runtime_malloc_bytes():i64 {}

// syscall ---
fn syscall_open(string filename, int flags, u32 perm):int {}

fn syscall_read(int fd, int len):[u8] {}

fn syscall_write(int fd, [u8] buf):int {}

fn syscall_close(int fd) {}

fn syscall_unlink(string path) {}

fn syscall_lseek(int fd, int offset, int whence):int {}
import coroutine_temp

var SOLO = 1 << 1

type linkco_t = struct{
    void_ptr co // 所有的 coroutine 都可以通过 processor 标记，所以此处使用 void_ptr 即可
    raw_ptr<linkco_t> prev
    raw_ptr<linkco_t> succ
    void_ptr data // 各种需要的数据存储, 比如 chan 中的 msg_ptr
}

type linkco_list_t = struct{
    raw_ptr<linkco_t> head
    raw_ptr<linkco_t> rear
    i64 count
    arr<u8,40> lock // c: pthread_mutex_t
}

type coroutine_t = struct{
    i32 status
}

fn create(fn() f, int flags):coroutine_t {
    var rt_co = coroutine_create(f, flags)

    return coroutine_t{
        status = rt_co.status
    }
}

fn run(fn() f, int flags):coroutine_t {
    var rt_co = coroutine_async(f, flags)

    return coroutine_t{
        status = rt_co.status
    }
}

fn sleep(int ms) {
    coroutine_sleep(ms)
}

fn yield() {
    rt_coroutine_yield()
}


#linkid rt_processor_index
fn processor_index():int
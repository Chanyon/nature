import coroutine_temp

var SOLO = 1 << 1

type coroutine_t = struct{
    i32 status
}

fn create(fn_t f, [any] args, int flags):coroutine_t {
    var rt_co = coroutine_create(f, args, flags)

    return coroutine_t{
        status = rt_co.status
    }
}

fn run(fn_t f, [any] args, int flags):coroutine_t {
    var rt_co = coroutine_run(f, args, flags)

    return coroutine_t{
        status = rt_co.status
    }
}

fn sleep(int ms) {
    coroutine_sleep(ms)
}

fn yield() {
    coroutine_yield()
}

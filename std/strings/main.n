import syscall
import fmt
import libc
import runtime

// 基于 c 字符串创建一个 nature 字符串 
fn from(void_ptr p):string! {
    return runtime.string_new(p)
}

fn string.find_char(u8 char, int after):int {
    int len = self.len()
    for int k = after; k < len; k += 1 {
        if self[k] == char {
            return k
        }
    }

    return -1
}

fn string.find_after(string sub, int after):int {
    var n = sub.len()

    if (n == 0) {
        return -1
    }

    if (n == 1) {
        return self.find_char(sub[0], after)
    }

    void_ptr base = self.ref()
    void_ptr temp = libc.strstr((base as uint + after as uint) as void_ptr, sub.ref())
    if temp == 0 {
        return -1
    }

    uint index = temp as uint - base as uint
    return index as int
}

fn string.reverse():string {
    var result = vec_new<u8>(self.len(), 0)

    for i,c in self {
        result[self.len() - 1 - i] = c
    }

    return result as string
}

fn string.rfind(string sub, int before):int {
    var reversed = self.reverse()
    sub = sub.reverse()

    var index = reversed.find_after(sub, reversed.len() - before)
    if index == -1 {
        return index
    }

    return reversed.len() - index - sub.len()
}

fn string.ends_with(string ends):bool {
    if ends.len() > self.len() {
        return false
    }

    var start = self.len() - ends.len()

    for i, c in ends {
        if self[start+i] != c {
            return false
        }
    }

    return true
}

fn string.starts_with(string starts):bool {
    if (starts.len() > self.len()) {
        return false
    }

    for i, c in starts {
        if self[i] != c {
            return false
        }
    }

    return true
}

fn string.contains(string sub):bool {
    return self.find(sub) != -1
}

fn string.finish(string cap):string {
    if self.ends_with(cap) {
        return self
    }

    return self + cap
}

fn string.find(string sub):int {
    return self.find_after(sub, 0)
}

fn string.slice(int start, int end):string {
    var list = self as [u8]
    list = list.slice(start, end)
    return list as string
}

fn string.split(string separator):[string] {
    [string] result = []

    if separator == '' {
        for v in self {
            result.push(fmt.sprintf('%c', v))
        }

        return result
    }

    if self == '' {
        return result
    }

    if self.len() <= separator.len() {
        return result
    }

    var i = 0
    for i < self.len() {
        var found = self.find_after(separator, i)
        if found == -1 {
            result.push(self.slice(i, self.len()))
            break
        }

        var part = self.slice(i, found)
        result.push(part)

        i = found + separator.len()
    }

    return result
}

fn join([string] list, string separator):string {
    [u8] result = []

    if list.len() == 0 {
        return ''
    }

    var i = 0
    for i < list.len() {
        for v in list[i] {
            result.push(v)
        }

        if i < list.len() - 1 {
            for v in separator {
                result.push(v)
            }
        }

        i = i + 1
    }

    return result as string
}

fn string.ascii():u8 {
    if self.len() == 0 {
        return 0
    }
    var list = self as [u8]
    return list[0]
}

fn string.ltrim([string] list):string {
    {u8} cut = {}
    for sub in list {
        cut.add(sub[0])
    }

    for i, c in self {
        if !cut.contains(c) {
            return self.slice(i, self.len())
        }
    }

    return ''
}

fn string.rtrim([string] list):string {
    {u8} cut = {}
    for sub in list {
        cut.add(sub[0])
    }

    for int i = self.len() - 1; i >= 0; i -= 1 {
        if !cut.contains(self[i]) {
            return self.slice(0, i + 1)
        }
    }

    return ''
}

fn string.trim([string] list):string {
    return self.ltrim(list).rtrim(list)
}

fn string.replace(string sub_old, string sub_new):string {
    var result = ""

    if sub_old.len() == 0 || self.len() < sub_old.len() {
        return self
    }

    var i = 0
    for i < self.len() {
        var found = self.find_after(sub_old, i)

        if found == -1 {
            result += self.slice(i, self.len())
            break
        }

        result += self.slice(i, found)
        result += sub_new
        i = found + sub_old.len()
    }

    return result
}

fn string.to_int():int! {
    if self.len() == 0 {
        throw errorf('cannot convert empty string to int')
    }

    var result = 0
    var start = 0
    var negative = false

    if self[0] == '-'.ascii() {
        negative = true
        start = 1
        if self.len() == 1 {
            throw errorf("invalid number format")
        }
    }

    for int i = start; i < self.len(); i += 1 {
        if self[i] != ' '.ascii() {
            start = i
            break
        }
    }

    for int i = start; i < self.len(); i += 1 {
        var c = self[i]
        if c < '0'.ascii() || c > '9'.ascii() {
            throw errorf("invalid character in number")
        }

        if result > 0x7FFFFFFF / 10 {
            throw errorf("number too large")
        }

        result = result * 10 + (c - '0'.ascii()) as int
    }

    if negative {
        result = -result
    }

    return result
}
import syscall
import io

// match runtime.fs_context_t 
type file_t:io.reader, io.writer, io.seeker = struct{
    i32 fd
    void_ptr data
    i64 data_len
    i64 data_cap
    bool closed
    // ... other fields
}

#linkid rt_uv_fs_open
fn open(string path, int flags, int mode):ptr<file_t>!

#linkid rt_uv_fs_content
fn file_t.content():string!

#linkid rt_uv_fs_read
fn file_t.read([u8] buf):int!

#linkid rt_uv_fs_write
fn file_t.write([u8] buf):int!

fn file_t.seek(int offset, int whence):int! {
    return syscall.seek(self.fd as int, offset, whence)
}

#linkid rt_uv_fs_read_at
fn file_t.read_at([u8] buf, int offset):int!

#linkid rt_uv_fs_write_at
fn file_t.write_at([u8] buf, int offset):int!

#linkid rt_uv_fs_close
fn file_t.close():void


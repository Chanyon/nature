import libc

int O_RDONLY = 0x0  // 只读模式
int O_WRONLY = 0x1  // 只写模式
int O_RDWR   = 0x2  // 读写模式

int O_APPEND = 0x8  // 追加写入
int O_CREAT = 0x40 // 如果文件不存在则创建文件
int O_EXCL   = 0x80 // 与 O_CREAT 一起使用，文件必须不存在
int O_TRUNC  = 0x200 // 打开文件时清空文件内容

int SEEK_SET = 0  // 移动到文件开头
int SEEK_CUR = 1 // 保持不变
int SEEK_END = 2 // 移动到文件末尾

int STDIN_FILENO = 0
int STDOUT_FILENO = 1
int STDERR_FILENO = 2

// 系统调用编码
int SYS_READ = 0
int SYS_WRITE = 1
int SYS_OPEN = 2
int SYS_CLOSE = 3
int SYS_STAT = 4
int SYS_FSTAT = 5
int SYS_LSTAT = 6
int SYS_POLL = 7
int SYS_LSEEK = 8
int SYS_MMAP = 9
int SYS_MPROTECT = 10
int SYS_MUNMAP = 11
int SYS_BRK = 12
int SYS_RT_SIGACTION = 13
int SYS_RT_SIGPROCMASK = 14
int SYS_RT_SIGRETURN = 15
int SYS_IOCTL = 16
int SYS_PREAD64 = 17
int SYS_PWRITE64 = 18
int SYS_READV = 19
int SYS_WRITEV = 20
int SYS_ACCESS = 21
int SYS_PIPE = 22
int SYS_SELECT = 23
int SYS_SCHED_YIELD = 24
int SYS_MREMAP = 25
int SYS_MSYNC = 26
int SYS_MINCORE = 27
int SYS_MADVISE = 28
int SYS_SHMGET = 29
int SYS_SHMAT = 30
int SYS_SHMCTL = 31
int SYS_DUP = 32
int SYS_DUP2 = 33
int SYS_PAUSE = 34
int SYS_NANOSLEEP = 35
int SYS_GETITIMER = 36
int SYS_ALARM = 37
int SYS_SETITIMER = 38
int SYS_GETPID = 39
int SYS_SENDFILE = 40
int SYS_SOCKET = 41
int SYS_CONNECT = 42
int SYS_ACCEPT = 43
int SYS_SENDTO = 44
int SYS_RECVFROM = 45
int SYS_SENDMSG = 46
int SYS_RECVMSG = 47
int SYS_SHUTDOWN = 48
int SYS_BIND = 49
int SYS_LISTEN = 50
int SYS_GETSOCKNAME = 51
int SYS_GETPEERNAME = 52
int SYS_SOCKETPAIR = 53
int SYS_SETSOCKOPT = 54
int SYS_GETSOCKOPT = 55
int SYS_CLONE = 56
int SYS_FORK = 57
int SYS_VFORK = 58
int SYS_EXECVE = 59
int SYS_EXIT = 60
int SYS_WAIT4 = 61
int SYS_KILL = 62
int SYS_UNAME = 63
int SYS_SEMGET = 64
int SYS_SEMOP = 65
int SYS_SEMCTL = 66
int SYS_SHMDT = 67
int SYS_MSGGET = 68
int SYS_MSGSND = 69
int SYS_MSGRCV = 70
int SYS_MSGCTL = 71
int SYS_FCNTL = 72
int SYS_FLOCK = 73
int SYS_FSYNC = 74
int SYS_FDATASYNC = 75
int SYS_TRUNCATE = 76
int SYS_FTRUNCATE = 77
int SYS_GETDENTS = 78
int SYS_GETCWD = 79
int SYS_CHDIR = 80
int SYS_FCHDIR = 81
int SYS_RENAME = 82
int SYS_MKDIR = 83
int SYS_RMDIR = 84
int SYS_CREAT = 85
int SYS_LINK = 86
int SYS_UNLINK = 87
int SYS_SYMLINK = 88
int SYS_READLINK = 89
int SYS_CHMOD = 90
int SYS_FCHMOD = 91
int SYS_CHOWN = 92
int SYS_FCHOWN = 93
int SYS_LCHOWN = 94
int SYS_UMASK = 95
int SYS_GETTIMEOFDAY = 96
int SYS_GETRLIMIT = 97
int SYS_GETRUSAGE = 98
int SYS_SYSINFO = 99
int SYS_TIMES = 100
int SYS_PTRACE = 101
int SYS_GETUID = 102
int SYS_SYSLOG = 103
int SYS_GETGID = 104
int SYS_SETUID = 105
int SYS_SETGID = 106
int SYS_GETEUID = 107
int SYS_GETEGID = 108
int SYS_SETPGID = 109
int SYS_GETPPID = 110
int SYS_GETPGRP = 111
int SYS_SETSID = 112
int SYS_SETREUID = 113
int SYS_SETREGID = 114
int SYS_GETGROUPS = 115
int SYS_SETGROUPS = 116
int SYS_SETRESUID = 117
int SYS_GETRESUID = 118
int SYS_SETRESGID = 119
int SYS_GETRESGID = 120
int SYS_GETPGID = 121
int SYS_SETFSUID = 122
int SYS_SETFSGID = 123
int SYS_GETSID = 124
int SYS_CAPGET = 125
int SYS_CAPSET = 126
int SYS_RT_SIGPENDING = 127
int SYS_RT_SIGTIMEDWAIT = 128
int SYS_RT_SIGQUEUEINFO = 129
int SYS_RT_SIGSUSPEND = 130
int SYS_SIGALTSTACK = 131
int SYS_UTIME = 132
int SYS_MKNOD = 133
int SYS_USELIB = 134
int SYS_PERSONALITY = 135
int SYS_USTAT = 136
int SYS_STATFS = 137
int SYS_FSTATFS = 138
int SYS_SYSFS = 139
int SYS_GETPRIORITY = 140
int SYS_SETPRIORITY = 141
int SYS_SCHED_SETPARAM = 142
int SYS_SCHED_GETPARAM = 143
int SYS_SCHED_SETSCHEDULER = 144
int SYS_SCHED_GETSCHEDULER = 145
int SYS_SCHED_GET_PRIORITY_MAX = 146
int SYS_SCHED_GET_PRIORITY_MIN = 147
int SYS_SCHED_RR_GET_INTERVAL = 148
int SYS_MLOCK = 149
int SYS_MUNLOCK = 150
int SYS_MLOCKALL = 151
int SYS_MUNLOCKALL = 152
int SYS_VHANGUP = 153
int SYS_MODIFY_LDT = 154
int SYS_PIVOT_ROOT = 155
int SYS__SYSCTL = 156
int SYS_PRCTL = 157
int SYS_ARCH_PRCTL = 158
int SYS_ADJTIMEX = 159
int SYS_SETRLIMIT = 160
int SYS_CHROOT = 161
int SYS_SYNC = 162
int SYS_ACCT = 163
int SYS_SETTIMEOFDAY = 164
int SYS_MOUNT = 165
int SYS_UMOUNT2 = 166
int SYS_SWAPON = 167
int SYS_SWAPOFF = 168
int SYS_REBOOT = 169
int SYS_SETHOSTNAME = 170
int SYS_SETDOMAINNAME = 171
int SYS_IOPL = 172
int SYS_IOPERM = 173
int SYS_CREATE_MODULE = 174
int SYS_INIT_MODULE = 175
int SYS_DELETE_MODULE = 176
int SYS_GET_KERNEL_SYMS = 177
int SYS_QUERY_MODULE = 178
int SYS_QUOTACTL = 179
int SYS_NFSSERVCTL = 180
int SYS_GETPMSG = 181
int SYS_PUTPMSG = 182
int SYS_AFS_SYSCALL = 183
int SYS_TUXCALL = 184
int SYS_SECURITY = 185
int SYS_GETTID = 186
int SYS_READAHEAD = 187
int SYS_SETXATTR = 188
int SYS_LSETXATTR = 189
int SYS_FSETXATTR = 190
int SYS_GETXATTR = 191
int SYS_LGETXATTR = 192
int SYS_FGETXATTR = 193
int SYS_LISTXATTR = 194
int SYS_LLISTXATTR = 195
int SYS_FLISTXATTR = 196
int SYS_REMOVEXATTR = 197
int SYS_LREMOVEXATTR = 198
int SYS_FREMOVEXATTR = 199
int SYS_TKILL = 200
int SYS_TIME = 201
int SYS_FUTEX = 202
int SYS_SCHED_SETAFFINITY = 203
int SYS_SCHED_GETAFFINITY = 204
int SYS_SET_THREAD_AREA = 205
int SYS_IO_SETUP = 206
int SYS_IO_DESTROY = 207
int SYS_IO_GETEVENTS = 208
int SYS_IO_SUBMIT = 209
int SYS_IO_CANCEL = 210
int SYS_GET_THREAD_AREA = 211
int SYS_LOOKUP_DCOOKIE = 212
int SYS_EPOLL_CREATE = 213
int SYS_EPOLL_CTL_OLD = 214
int SYS_EPOLL_WAIT_OLD = 215
int SYS_REMAP_FILE_PAGES = 216
int SYS_GETDENTS64 = 217
int SYS_SET_TID_ADDRESS = 218
int SYS_RESTART_SYSCALL = 219
int SYS_SEMTIMEDOP = 220
int SYS_FADVISE64 = 221
int SYS_TIMER_CREATE = 222
int SYS_TIMER_SETTIME = 223
int SYS_TIMER_GETTIME = 224
int SYS_TIMER_GETOVERRUN = 225
int SYS_TIMER_DELETE = 226
int SYS_CLOCK_SETTIME = 227
int SYS_CLOCK_GETTIME = 228
int SYS_CLOCK_GETRES = 229
int SYS_CLOCK_NANOSLEEP = 230
int SYS_EXIT_GROUP = 231
int SYS_EPOLL_WAIT = 232
int SYS_EPOLL_CTL = 233
int SYS_TGKILL = 234
int SYS_UTIMES = 235
int SYS_VSERVER = 236
int SYS_MBIND = 237
int SYS_SET_MEMPOLICY = 238
int SYS_GET_MEMPOLICY = 239
int SYS_MQ_OPEN = 240
int SYS_MQ_UNLINK = 241
int SYS_MQ_TIMEDSEND = 242
int SYS_MQ_TIMEDRECEIVE = 243
int SYS_MQ_NOTIFY = 244
int SYS_MQ_GETSETATTR = 245
int SYS_KEXEC_LOAD = 246
int SYS_WAITID = 247
int SYS_ADD_KEY = 248
int SYS_REQUEST_KEY = 249
int SYS_KEYCTL = 250
int SYS_IOPRIO_SET = 251
int SYS_IOPRIO_GET = 252
int SYS_INOTIFY_INIT = 253
int SYS_INOTIFY_ADD_WATCH = 254
int SYS_INOTIFY_RM_WATCH = 255
int SYS_MIGRATE_PAGES = 256
int SYS_OPENAT = 257
int SYS_MKDIRAT = 258
int SYS_MKNODAT = 259
int SYS_FCHOWNAT = 260
int SYS_FUTIMESAT = 261
int SYS_NEWFSTATAT = 262
int SYS_UNLINKAT = 263
int SYS_RENAMEAT = 264
int SYS_LINKAT = 265
int SYS_SYMLINKAT = 266
int SYS_READLINKAT = 267
int SYS_FCHMODAT = 268
int SYS_FACCESSAT = 269
int SYS_PSELECT6 = 270
int SYS_PPOLL = 271
int SYS_UNSHARE = 272
int SYS_SET_ROBUST_LIST = 273
int SYS_GET_ROBUST_LIST = 274
int SYS_SPLICE = 275
int SYS_TEE = 276
int SYS_SYNC_FILE_RANGE = 277
int SYS_VMSPLICE = 278
int SYS_MOVE_PAGES = 279
int SYS_UTIMENSAT = 280
int SYS_EPOLL_PWAIT = 281
int SYS_SIGNALFD = 282
int SYS_TIMERFD_CREATE = 283
int SYS_EVENTFD = 284
int SYS_FALLOCATE = 285
int SYS_TIMERFD_SETTIME = 286
int SYS_TIMERFD_GETTIME = 287
int SYS_ACCEPT4 = 288
int SYS_SIGNALFD4 = 289
int SYS_EVENTFD2 = 290
int SYS_EPOLL_CREATE1 = 291
int SYS_DUP3 = 292
int SYS_PIPE2 = 293
int SYS_INOTIFY_INIT1 = 294
int SYS_PREADV = 295
int SYS_PWRITEV = 296
int SYS_RT_TGSIGQUEUEINFO = 297
int SYS_PERF_EVENT_OPEN = 298
int SYS_RECVMMSG = 299
int SYS_FANOTIFY_INIT = 300
int SYS_FANOTIFY_MARK = 301
int SYS_PRLIMIT64 = 302

// sigkill 相关信号
int SIGABRT = 0x6
int SIGALRM = 0xe
int SIGBUS = 0x7
int SIGCHLD = 0x11
int SIGCLD = 0x11
int SIGCONT = 0x12
int SIGFPE = 0x8
int SIGHUP = 0x1
int SIGILL = 0x4
int SIGINT = 0x2
int SIGIO = 0x1d
int SIGIOT = 0x6
int SIGKILL = 0x9
int SIGPIPE = 0xd
int SIGPOLL = 0x1d
int SIGPROF = 0x1b
int SIGPWR = 0x1e
int SIGQUIT = 0x3
int SIGSEGV = 0xb
int SIGSTKFLT = 0x10
int SIGSTOP = 0x13
int SIGSYS = 0x1f
int SIGTERM = 0xf
int SIGTRAP = 0x5
int SIGTSTP = 0x14
int SIGTTIN = 0x15
int SIGTTOU = 0x16
int SIGUNUSED = 0x1f
int SIGURG = 0x17
int SIGUSR1 = 0xa
int SIGUSR2 = 0xc
int SIGVTALRM = 0x1a
int SIGWINCH = 0x1c
int SIGXCPU = 0x18
int SIGXFSZ = 0x19

// 网络相关
int AF_ALG = 0x26
int AF_APPLETALK = 0x5
int AF_ASH = 0x12
int AF_ATMPVC = 0x8
int AF_ATMSVC = 0x14
int AF_AX25 = 0x3
int AF_BLUETOOTH = 0x1f
int AF_BRIDGE = 0x7
int AF_CAIF = 0x25
int AF_CAN = 0x1d
int AF_DECnet = 0xc
int AF_ECONET = 0x13
int AF_FILE = 0x1
int AF_IEEE802154 = 0x24
int AF_INET = 0x2
int AF_INET6 = 0xa
int AF_IPX = 0x4
int AF_IRDA = 0x17
int AF_ISDN = 0x22
int AF_IUCV = 0x20
int AF_KEY = 0xf
int AF_LLC = 0x1a
int AF_LOCAL = 0x1
int AF_MAX = 0x27
int AF_NETBEUI = 0xd
int AF_NETLINK = 0x10
int AF_NETROM = 0x6
int AF_PACKET = 0x11
int AF_PHONET = 0x23
int AF_PPPOX = 0x18
int AF_RDS = 0x15
int AF_ROSE = 0xb
int AF_ROUTE = 0x10
int AF_RXRPC = 0x21
int AF_SECURITY = 0xe
int AF_SNA = 0x16
int AF_TIPC = 0x1e
int AF_UNIX = 0x1
int AF_UNSPEC = 0x0
int AF_WANPIPE = 0x19
int AF_X25 = 0x9
int ARPHRD_ADAPT = 0x108
int ARPHRD_APPLETLK = 0x8
int ARPHRD_ARCNET = 0x7
int ARPHRD_ASH = 0x30d
int ARPHRD_ATM = 0x13
int ARPHRD_AX25 = 0x3
int ARPHRD_BIF = 0x307
int ARPHRD_CHAOS = 0x5
int ARPHRD_CISCO = 0x201
int ARPHRD_CSLIP = 0x101
int ARPHRD_CSLIP6 = 0x103
int ARPHRD_DDCMP = 0x205
int ARPHRD_DLCI = 0xf
int ARPHRD_ECONET = 0x30e
int ARPHRD_EETHER = 0x2
int ARPHRD_ETHER = 0x1
int ARPHRD_EUI64 = 0x1b
int ARPHRD_FCAL = 0x311
int ARPHRD_FCFABRIC = 0x313
int ARPHRD_FCPL = 0x312
int ARPHRD_FCPP = 0x310
int ARPHRD_FDDI = 0x306
int ARPHRD_FRAD = 0x302
int ARPHRD_HDLC = 0x201
int ARPHRD_HIPPI = 0x30c
int ARPHRD_HWX25 = 0x110
int ARPHRD_IEEE1394 = 0x18
int ARPHRD_IEEE802 = 0x6
int ARPHRD_IEEE80211 = 0x321
int ARPHRD_IEEE80211_PRISM = 0x322
int ARPHRD_IEEE80211_RADIOTAP = 0x323
int ARPHRD_IEEE802154 = 0x324
int ARPHRD_IEEE802154_PHY = 0x325
int ARPHRD_IEEE802_TR = 0x320
int ARPHRD_INFINIBAND = 0x20
int ARPHRD_IPDDP = 0x309
int ARPHRD_IPGRE = 0x30a
int ARPHRD_IRDA = 0x30f
int ARPHRD_LAPB = 0x204
int ARPHRD_LOCALTLK = 0x305
int ARPHRD_LOOPBACK = 0x304
int ARPHRD_METRICOM = 0x17
int ARPHRD_NETROM = 0x0
int ARPHRD_NONE = 0xfffe
int ARPHRD_PIMREG = 0x30b
int ARPHRD_PPP = 0x200
int ARPHRD_PRONET = 0x4
int ARPHRD_RAWHDLC = 0x206
int ARPHRD_ROSE = 0x10e
int ARPHRD_RSRVD = 0x104
int ARPHRD_SIT = 0x308
int ARPHRD_SKIP = 0x303
int ARPHRD_SLIP = 0x100
int ARPHRD_SLIP6 = 0x102
int ARPHRD_TUNNEL = 0x300
int ARPHRD_TUNNEL6 = 0x301
int ARPHRD_VOID = 0xffff
int ARPHRD_X25 = 0x10f

int SOCK_CLOEXEC = 0x80000
int SOCK_DCCP = 0x6
int SOCK_DGRAM = 0x2
int SOCK_NONBLOCK = 0x800
int SOCK_PACKET = 0xa
int SOCK_RAW = 0x3
int SOCK_RDM = 0x4
int SOCK_SEQPACKET = 0x5
int SOCK_STREAM = 0x1

type timespec_t = syscall_timespec_t
type stat_t = syscall_stat_t

fn read(int fd, int len):[u8] {
    return syscall_read(fd, len)
}

fn write(int fd, [u8] buf):int {
    return syscall_write(fd, buf)
}

fn open(string filename, int flags, u32 perm):int {
    return syscall_open(filename, flags, perm)
}

fn close(int fd) {
    return syscall_close(fd)
}

fn unlink(string path) {
    return syscall_unlink(path)
}

fn seek(int fd, int offset, int whence):int {
    return syscall_lseek(fd, offset, whence)
}

fn fork():int {
    return syscall_fork()
}

fn exec(string path, [string] argv, [string] envp) {
    return syscall_exec(path, argv, envp)
}

fn stat(string filename):stat_t {
    return syscall_stat(filename)
}

fn fstat(int fd):stat_t {
    return syscall_fstat(fd)
}

fn mkdir(string path, u32 mode) {
    return syscall_mkdir(path, mode)
}

fn rmdir(string path) {
    return syscall_rmdir(path)
}

fn rename(string oldpath, string newpath) {
    return syscall_rename(oldpath, newpath)
}

fn exit(int status) {
    return syscall_exit(status)
}

fn getpid():int {
    return syscall_getpid()
}

fn getppid():int {
    return syscall_getppid()
}

fn kill(int pid, int sig) {
    return syscall_kill(pid, sig)
}

fn wait(int pid):int {
    return syscall_wait(pid)
}

fn chdir(string path) {
    return syscall_chdir(path)
}

fn chroot(string path) {
    return syscall_chroot(path)
}

fn chown(string path, u32 uid, u32 gid) {
    return syscall_chown(path, uid, gid)
}

fn chmod(string path, u32 mode) {
    return syscall_chmod(path, mode)
}

fn getcwd():string {
    return syscall_getcwd()
}

fn call6(int number, cptr a1, cptr a2, cptr a3, cptr a4, cptr a5, cptr a6):int {
    return syscall_call6(number, a1, a2, a3, a4, a5, a6)
}


// socket 相关
type sockaddr_in = struct { // linux_amd64 占用 8 个字节
    u16 sin_family
    u16 sin_port
    u32 sin_addr

    [u8,8] sin_zero
}

type sockaddr_in6 = struct {
    u8 sin6_len
    u8 sin6_family
    u16 sin6_port
    u32 sin6_flowinfo
    // ipv6 address(128-bit)
    [u32,4] sin6_addr
    u32 sin6_scope_id
}

type sockaddr_un = struct {
    u8 sun_len
    u8 sun_family
    // 108 byte
    [u8,104] sun_path
}

fn socket(int domain, int t, int protocol):int {
    return call6(SYS_SOCKET, domain as cptr, t as cptr, protocol as cptr, 0, 0, 0)
}

// 泛型与重载组合使用
type sockaddr_t = gen sockaddr_in|sockaddr_un

fn bind(int sockfd, sockaddr_t addr) {
    // 将 naturestruct 转换为 c struct
     cptr p = libc.encode(addr)
     var len = 16 as cptr // in 和 unix 长度为 16byte
     call6(SYS_BIND, sockfd as cptr, p, len, 0, 0, 0)
}

fn bind(int sockfd, sockaddr_in6 addr) {
    cptr p = libc.encode(addr)
    var len = 28 as cptr
    call6(SYS_BIND, sockfd as cptr, p, len, 0, 0, 0)
}

// backlog 表示最大的监听长度
fn listen(int sockfd, int backlog) {
    call6(SYS_LISTEN, sockfd as cptr, backlog as cptr, 0, 0, 0, 0)
}

// 相应 client sockfd 和 client sockaddr
fn accept(int sockfd, sockaddr_t addr):int {
    var p =  libc.encode(addr)
    var len = 16
    ptr<int> len_ptr = &len

    int fd = call6(SYS_ACCEPT, sockfd as cptr, p, len_ptr as cptr, 0, 0, 0)

    // 将 p 中的值赋值给 addr, p 会被垃圾回收回收
    // libc.decode(p, addr)
    return fd
}
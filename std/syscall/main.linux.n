int O_RDONLY = 0x0  // 只读模式
int O_WRONLY = 0x1  // 只写模式
int O_RDWR   = 0x2  // 读写模式

int O_APPEND = 0x8  // 追加写入
int O_CREAT = 0x40 // 如果文件不存在则创建文件
int O_EXCL   = 0x80 // 与 O_CREAT 一起使用，文件必须不存在
int O_TRUNC  = 0x200 // 打开文件时清空文件内容

int SEEK_SET = 0  // 移动到文件开头
int SEEK_CUR = 1 // 保持不变
int SEEK_END = 2 // 移动到文件末尾

// sigkill 相关信号
int SIGABRT = 0x6
int SIGALRM = 0xe
int SIGBUS = 0x7
int SIGCHLD = 0x11
int SIGCLD = 0x11
int SIGCONT = 0x12
int SIGFPE = 0x8
int SIGHUP = 0x1
int SIGILL = 0x4
int SIGINT = 0x2
int SIGIO = 0x1d
int SIGIOT = 0x6
int SIGKILL = 0x9
int SIGPIPE = 0xd
int SIGPOLL = 0x1d
int SIGPROF = 0x1b
int SIGPWR = 0x1e
int SIGQUIT = 0x3
int SIGSEGV = 0xb
int SIGSTKFLT = 0x10
int SIGSTOP = 0x13
int SIGSYS = 0x1f
int SIGTERM = 0xf
int SIGTRAP = 0x5
int SIGTSTP = 0x14
int SIGTTIN = 0x15
int SIGTTOU = 0x16
int SIGUNUSED = 0x1f
int SIGURG = 0x17
int SIGUSR1 = 0xa
int SIGUSR2 = 0xc
int SIGVTALRM = 0x1a
int SIGWINCH = 0x1c
int SIGXCPU = 0x18
int SIGXFSZ = 0x19


type timespec_t = syscall_timespec_t
type stat_t = syscall_stat_t

fn read(int fd, int len):[u8] {
    return syscall_read(fd, len)
}

fn write(int fd, [u8] buf):int {
    return syscall_write(fd, buf)
}

fn open(string filename, int flags, u32 perm):int {
    return syscall_open(filename, flags, perm)
}

fn close(int fd) {
    return syscall_close(fd)
}

fn unlink(string path) {
    return syscall_unlink(path)
}

fn seek(int fd, int offset, int whence):int {
    return syscall_lseek(fd, offset, whence)
}

fn fork():int {
    return syscall_fork()
}

fn exec(string path, [string] argv, [string] envp) {
    return syscall_exec(path, argv, envp)
}

fn stat(string filename):stat_t {
    return syscall_stat(filename)
}

fn fstat(int fd):stat_t {
    return syscall_fstat(fd)
}

fn mkdir(string path, u32 mode) {
    return syscall_mkdir(path, mode)
}

fn rmdir(string path) {
    return syscall_rmdir(path)
}

fn rename(string oldpath, string newpath) {
    return syscall_rename(oldpath, newpath)
}

fn exit(int status) {
    return syscall_exit(status)
}

fn getpid():int {
    return syscall_getpid()
}

fn getppid():int {
    return syscall_getppid()
}

fn kill(int pid, int sig) {
    return syscall_kill(pid, sig)
}

fn wait(int pid):int {
    return syscall_wait(pid)
}

fn chdir(string path) {
    return syscall_chdir(path)
}

fn chroot(string path) {
    return syscall_chroot(path)
}

fn chown(string path, u32 uid, u32 gid) {
    return syscall_chown(path, uid, gid)
}

fn chmod(string path, u32 mode) {
    return syscall_chmod(path, mode)
}

fn getcwd():string {
    return syscall_getcwd()
}


#linkid std_args
fn std_args():[string]

#linkid htons
fn htons(u16 host):u16

/* ISO C `broken-down time' structure.  */
type tm_t = struct {
    i32 tm_sec
    i32 tm_min
    i32 tm_hour
    i32 tm_mday
    i32 tm_mon
    i32 tm_year
    i32 tm_wday
    i32 tm_yday
    i32 tm_isdst
    i64 tm_gmtoff
    void_ptr tm_zone
}

// 标准库函数, 返回值是静态值，不用处理 gc 但是线程不安全
#linkid localtime
fn localtime(raw_ptr<i64> timestamp):ptr<tm_t>

// 将 time_info_t 转换为时间戳
#linkid mktime
fn mktime(raw_ptr<tm_t> time_info):i64

// strftime(buf.ref(), buf.len(), '%Y-%m-%d %H:%M:%S', &tp)
#linkid strftime
fn strftime(void_ptr s, i64 size, void_ptr format, raw_ptr<tm_t> time_info):i64

// 通过空值 options 实现阻塞和非阻塞模式
#linkid waitpid
fn waitpid(int pid, raw_ptr<int> status, int options):int

// --- signal 相关 <sys/signalfd.h> 和 <signal.h>
type sigset_t = struct {
    arr<u64,16> __val
}

type signalfd_siginfo_t = struct {
    u32 ssi_signo
    i32 ssi_errno
    i32 ssi_code
    u32 ssi_pid
    u32 ssi_uid
    i32 ssi_fd
    u32 ssi_tid
    u32 ssi_band
    u32 ssi_overrun
    u32 ssi_trapno
    i32 ssi_status
    i32 ssi_int
    u64 ssi_ptr
    u64 ssi_utime
    u64 ssi_stime
    u64 ssi_addr
    u16 ssi_addr_lsb
    u32 __pad2
    i32 ssi_syscall
    u64 ssi_call_addr
    u32 ssi_arch
    arr<u8,48> __pad
}

#linkid sigemptyset
fn sigemptyset(ptr<sigset_t> sigset):i32

#linkid sigaddset
fn sigaddset(ptr<sigset_t> sigset, i32 signo):i32

#linkid sigfillset
fn sigfillset(ptr<sigset_t> sigset):i32

#linkid sigprocmask
fn sigprocmask(i32 how, ptr<sigset_t> sigset, raw_ptr<sigset_t> oldset):i32

#linkid signalfd
fn signalfd(int fd, ptr<sigset_t> mask, i32 flags):i32

#linkid sleep
fn sleep(int second)

#linkid usleep
fn usleep(u32 usec):i32

#linkid strtol
fn strtol(void_ptr str, void_ptr endptr, i32 base):i64

#linkid prctl
fn prctl(int option, u64 arg2, u64 arg3, u64 arg4, u64 arg5):int

#linkid srand
fn srand(u32 seed)

#linkid rand
fn rand():int

#linkid clock
fn clock():int

#linkid uv_hrtime
fn uv_hrtime():u64

// 读取当前全局的 errno 编码
#linkid rt_errno
fn errno():int

#linkid rt_get_envs
fn get_envs():[string]

#linkid rt_strerror
fn strerror():string

#linkid exit
fn exit(i32 status)

#linkid fork
fn fork():int

#linkid getcwd
fn getcwd(void_ptr path, uint size):void_ptr

#linkid strlen
fn strlen(void_ptr str):uint

#linkid strstr
fn strstr(void_ptr haystack, void_ptr needle):void_ptr

#linkid strrstr
fn strrstr(void_ptr haystack, void_ptr needle):void_ptr
int test() {
    throw "have exception"
    return 1
}


// 不处理异常，此时如果出现异常则继续自动向上 throw, 类似 golang 的 if err != nil return err
var i = test()

// 处理异常, 但是这样有一个问题,如果 test() 返回的是一个结构体时，则会显得有些歧义。
// var i,error = test().catch() // x
// handle error
// if (error) {
//  i = default_value
// }


// 新增语法糖拦截异常
// tuple(int, error) foo = ()
// var i, error = catch test()
// 类型推断出 test 的原有类型 + 新增 error 类型组合的 tuple
var (i, error) = catch test()  // v


// 抛出错误？
throw("not found exception") // x throw 会产生一个 error 类型,并保存在 memory_fn 中？还是？
throw "not found exception" // v 为了和 catch 更加保持一致,也新增语法糖 throw

// 如果协程和 catch 语法一起使用? 好像影响也不大
// c = co.create(fn() {})
// c.run()
// 后续加入 co 语法糖, 问题也不大， catch 是 call 中的语法糖,所以两者相互不冲突
// 不过如果要对 fn def 加入其他类似的语法糖就会比较丑了，所以只能选一个语法糖，那就选定 catch


// error 类型标志定义, 类似 java 中各种类型的 exception
// err.msg() vs err.str() x
// err.msg v
type error = struct {
    // string message // x 错误信息
    // fn() str // x 暂时取消方法的输出，主要是名字太难想了
    // fn() msg // x 暂时取消方法的输出，主要是名字太难想了
    string msg // v 错误信息
}


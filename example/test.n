//import "src/redis" module_name local_redis // redis.set
//import "github.com/weiwenhao/redis" module_name remote_redis // redis.set

type struct_test = struct {
	fn<int()> car
}

var baz = struct_test {
	car = int () {
		int a =12
		return a
	}
}

baz.car = int () {

}
baz.car = fn(): int {

}

var etc = struct {
	int a
	bool b
} {
	a = 1
}


map{string:int} foo_44 = {
  'a-a':1,
  'b-b':2,
  'c-c':3
}

type custom1 = int
//custom1 testy() {
//
//}

fn<custom1()> testy = custom1 () {

}

var foo19 = testy()

string car = "str"

int call4() {

}

fn call4(): int {
}

var b11 = 3
var a12 = 12

while (true) {
	var b = 3
	var a = 12
}



var test2 = 12

var test = 12

int custom_call(int foo, int bar, fn<int()> c) {

}

type person = int
var custom_type = 1
custom_call(
test,
test2,
person () {
	return 1
})

var a = ["123"]
var iteration = [1,2,3]
for (var key,value in iteration) {

}

int b
if (b > 1) {
	b = b + 1
}


var test3 = 1
int call() {
}

int test_f1(int a) {}

test_f1(call())

type custom = int

var a1 = custom () {

}

var a2 = custom foo3() {

}

custom () {

}



bool () {
	return true
}

custom test5() {

}
var foo1 = test5()

list[int] foo = [
			1,
			2
]

int test6() {
	int a = 24
	return 12
}

map{string:int} foo_4 = {
  'a-a':1,
  'b-b':2,
  'c-c':3
}

var bar = "test"
var bbq =24

foo[bbq] = 12
int foo_5
var foo_6 = 12 // 类型推导


foo_6 = 1 + 3
foo_6 = 1 + 1 * 1
foo_6 = 1 + 4 * (2 - 3 / 3)
int foo_7 = 12
bool foo_8 = true
string foo_9 = "为什么最常用的字符串要是双引号？，是有什么规定吗？"


foo[2] = 12
baz.car()
baz.car()
baz.car()
baz.car()

// 特殊格式语法糖，兼容  list<int>
list[int] foo_10 = [
			1,
			2
]
//list[int] foo = list_gen(int, 100) // 待定
//list[int] foo = make(list[int], 100) // 待定
//list<int> bar = []
// list<int> bar = my_gen()
//list[int]

var a_3 = [true,false]


// 特殊格式语法糖，兼容 map<string,int>
map{string:int} foo_11 = {
  'a-a':1,
  'b-b':2,
  'c-c':3
}

type my_int_a = int

float test25(int a) {
	my_int_a foo = 24
	return 12.2
}

var apple = test25(1)

if (apple > 1) {
	apple = apple + 1
}

var l = ["str","str21"]

for (var key,value in l) {

}

while (true) {

}



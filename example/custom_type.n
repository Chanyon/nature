// 方案 1
//type foo = bar
//type person = struct {
//	int a,
//	float b,
//	bool c,
//	struct {
//		int d1
//		int d2
//	} d
//}

//person max = person {
//	a: 12,
//	b: 13
//	d: d_struct {
//		d1: 12,
//		d2: 14
//	}
//}


// 方案 2, 暂时不实现赋默认值,但是最终肯定是要实现的
type person = struct {
	int a = 1 // 仅限于literal 值,甚至不允许三元运算符等语法，但是这里的初始化就和奇怪，甚至不知道应该发生在什么时候?
	int b
	int c
	animal d = animal {

	}
	list[string] e = ["a", "b", "c", "d"]
	struct {
		int foo
	} f
}

var max = person {
	a = 12
	b = 1 + 1
	c = call()
}


map{string:any} foo = {
	"list": ["1", "2", "3"],
	"bool": true,
	"int": 1,
	"null": null
}
set{int} = {1, 2, 3, 4}
array[any] = [
	{
		"a": 1
	}
	[]
]

tuple(int, bool) = (1, true)

// 带前缀(第一版如果不好编译的话就别省略了,直接通过类型判断数据结构还是挺方便的)
array[int] a = [1, 2, 3]
array[int, 2] a = [1, 2]
tuple(int, bool) b = (1, true)
map{string: any} c = {"a": 1, "b": true} // key 必须是简单类型，值则可以是复合类型？
set{int} d = {1, 2, 3, 4} // 只支持简单类型？

// 省略前缀
[any] a = [1, 2, 3]
(int, bool) b = (1, true)
{string: any} c = {"a": 1, "b": true} // key 必须是简单类型，值则可以是复合类型？
{int} d = {1, 2, 3, 4} // 只支持简单类型？

// 在函数中的参数(省略返回值)
void test([int] a, (int, bool) b, {string: any} c, {int} d) {
}

test(list[1, 2, 3], tuple(1, int), map{"test": b}, set{1, 2, 4})

